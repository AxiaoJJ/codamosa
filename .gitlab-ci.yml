# SPDX-FileCopyrightText: 2019-2021 Pynguin Contributors
#
# SPDX-License-Identifier: LGPL-3.0-or-later

image: python:${PYTHON_VERSION}

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID           # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'develop'  # Execute jobs when a new commit is pushed to develop branch

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .cache/pypoetry

.python-cache: &python-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/pip
      - .cache/pypoetry

stages:
  - build
  - lint
  - test
  - security
  - deploy

before_script:
  - python --version
  - pip install poetry
  - poetry install

.unit-tests: &unit-tests
  stage: test
  script:
    - poetry run pytest -q --cov=pynguin --cov-branch --cov-report html:cov_html --cov-report=term-missing tests/
  artifacts:
    paths:
      - cov_html
  <<: *python-cache

unit-tests:python-3.8:
  <<: *unit-tests
  variables:
    PYTHON_VERSION: '3.8-buster'

unit-tests:python-3.9:
  <<: *unit-tests
  variables:
    PYTHON_VERSION: '3.9-buster'

unit-tests:python-3.10:
  <<: *unit-tests
  allow_failure: true
  variables:
    PYTHON_VERSION: '3.10-rc-buster'

.nightly-tests:
  only:
    - schedules
  stage: test
  before_script:
    - python --version
    - pip install poetry
    - poetry install
    - poetry add --dev pytest-random-order
  script:
    - for ((i=1; i<=10; i++)); do echo "test run ${i}\n"; poetry run pytest -q --cov=pynguin --cov-branch --random-order --random-order-bucket=global ; done
  <<: *python-cache

nightly-tests:python-3.8:
  extends: .nightly-tests
  variables:
    PYTHON_VERSION: '3.8-buster'

nightly-tests:python-3.9:
  extends: .nightly-tests
  variables:
    PYTHON_VERSION: '3.9-buster'

nightly-tests:python-3.10:
  extends: .nightly-tests
  allow_failure: true
  variables:
    PYTHON_VERSION: '3.10-rc-buster'

mypy:
  stage: lint
  image: python:3.8
  script:
    - poetry run mypy pynguin
  <<: *python-cache

pylint:
  stage: lint
  image: python:3.8
  script:
    - poetry run pylint pynguin
  <<: *python-cache

flake8:
  stage: lint
  image: python:3.8
  script:
    - poetry run flake8 .
  <<: *python-cache

darglint:
  stage: lint
  image: python:3.8
  script:
    - poetry run darglint -v 2 pynguin/**/*.py
  <<: *python-cache

black:
  stage: build
  image: python:3.8
  script:
    - poetry run black --check .
  <<: *python-cache

isort:
  stage: build
  image: python:3.8
  script:
    - poetry run isort **/*.py -c -v
  <<: *python-cache

safety:
  stage: security
  image: python:3.8
  script:
    - poetry run safety check --full-report
  <<: *python-cache

bandit:
  stage: security
  image: python:3.8
  script:
    - poetry run bandit -ll -r pynguin
  <<: *python-cache

sphinx:
  stage: build
  image: python:3.8
  script:
    - poetry run sphinx-build docs docs/_build
  artifacts:
    paths:
      - docs/_build
  <<: *python-cache

# check license declarations etc.
reuse:
  stage: lint
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  before_script:
    - python --version
  script:
    - reuse lint

publish-pypi:
  stage: deploy
  needs:
    - unit-tests:python-3.8
    - sphinx
  variables:
    PYTHON_VERSION: '3.8'
    POETRY_PYPI_TOKEN_PYPI: $POETRY_PYPI_TOKEN_PYPI
    POETRY_HTTP_BASIC_PYPI_USERNAME: $POETRY_HTTP_BASIC_PYPI_USERNAME
    POETRY_HTTP_BASIC_PYPI_PASSWORD: $POETRY_HTTP_BASIC_PYPI_PASSWORD
  dependencies:
    - sphinx
    - unit-tests:python-3.8
  script:
    - poetry build
    - poetry publish
  only:
    - tags
